{
  "version": 3,
  "sources": ["../node_modules/ulid/stubs/crypto.js", "../src/plugins/push/index.ts", "../src/plugins/push/pushchannel.ts", "../src/plugins/push/getW3CDeviceDetails.ts", "../node_modules/ulid/dist/index.esm.js", "../src/plugins/push/pushactivation.ts"],
  "sourcesContent": ["", "import PushChannel from './pushchannel';\nimport { getW3CPushDeviceDetails } from './getW3CDeviceDetails';\nimport { ActivationStateMachine, CalledActivate, CalledDeactivate, localDeviceFactory } from './pushactivation';\n\nexport {\n  ActivationStateMachine,\n  localDeviceFactory,\n  CalledActivate,\n  CalledDeactivate,\n  PushChannel,\n  getW3CPushDeviceDetails,\n};\n\nexport default {\n  ActivationStateMachine,\n  localDeviceFactory,\n  CalledActivate,\n  CalledDeactivate,\n  PushChannel,\n  getW3CPushDeviceDetails,\n};\n", "import type BaseClient from 'common/lib/client/baseclient';\r\nimport type RealtimeChannel from 'common/lib/client/realtimechannel';\r\nimport type RestChannel from 'common/lib/client/restchannel';\r\n\r\nclass PushChannel {\r\n  client: BaseClient;\r\n  channel: RestChannel | RealtimeChannel;\r\n\r\n  constructor(channel: RestChannel | RealtimeChannel) {\r\n    this.channel = channel;\r\n    this.client = channel.client;\r\n  }\r\n\r\n  async subscribeDevice() {\r\n    const client = this.client;\r\n    const device = client.device();\r\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n      body = { deviceId: device.id, channel: this.channel.name },\r\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\r\n\r\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\r\n\r\n    client.Utils.mixin(headers, this._getPushAuthHeaders());\r\n\r\n    const requestBody = client.Utils.encodeBody(body, client._MsgPack, format);\r\n    await client.rest.Resource.post(client, '/push/channelSubscriptions', requestBody, headers, {}, format, true);\r\n  }\r\n\r\n  async unsubscribeDevice() {\r\n    const client = this.client;\r\n    const device = client.device();\r\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\r\n\r\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\r\n\r\n    client.Utils.mixin(headers, this._getPushAuthHeaders());\r\n\r\n    await client.rest.Resource.delete(\r\n      client,\r\n      '/push/channelSubscriptions',\r\n      headers,\r\n      { deviceId: device.id, channel: this.channel.name },\r\n      format,\r\n      true,\r\n    );\r\n  }\r\n\r\n  async subscribeClient() {\r\n    const client = this.client;\r\n    const clientId = this.client.auth.clientId;\r\n    if (!clientId) {\r\n      throw new this.client.ErrorInfo('Cannot subscribe from client without client ID', 50000, 500);\r\n    }\r\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n      body = { clientId: clientId, channel: this.channel.name },\r\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\r\n\r\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\r\n\r\n    const requestBody = client.Utils.encodeBody(body, client._MsgPack, format);\r\n    await client.rest.Resource.post(client, '/push/channelSubscriptions', requestBody, headers, {}, format, true);\r\n  }\r\n\r\n  async unsubscribeClient() {\r\n    const client = this.client;\r\n\r\n    const clientId = this.client.auth.clientId;\r\n    if (!clientId) {\r\n      throw new this.client.ErrorInfo('Cannot unsubscribe from client without client ID', 50000, 500);\r\n    }\r\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\r\n\r\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\r\n\r\n    await client.rest.Resource.delete(\r\n      client,\r\n      '/push/channelSubscriptions',\r\n      headers,\r\n      { clientId: clientId, channel: this.channel.name },\r\n      format,\r\n      true,\r\n    );\r\n  }\r\n\r\n  async listSubscriptions(params?: Record<string, string>) {\r\n    this.client.Logger.logAction(\r\n      this.client.logger,\r\n      this.client.Logger.LOG_MICRO,\r\n      'PushChannel.listSubscriptions()',\r\n      'channel = ' + this.channel.name,\r\n    );\r\n\r\n    return this.client.push.admin.channelSubscriptions.list({\r\n      ...params,\r\n      channel: this.channel.name,\r\n      concatFilters: true,\r\n    });\r\n  }\r\n\r\n  private _getDeviceIdentityToken() {\r\n    const device = this.client.device();\r\n    const deviceIdentityToken = device.deviceIdentityToken;\r\n    if (deviceIdentityToken) {\r\n      return deviceIdentityToken;\r\n    } else {\r\n      throw new this.client.ErrorInfo('Cannot subscribe from client without deviceIdentityToken', 50000, 500);\r\n    }\r\n  }\r\n\r\n  private _getPushAuthHeaders() {\r\n    const deviceIdentityToken = this._getDeviceIdentityToken();\r\n    return { 'X-Ably-DeviceToken': deviceIdentityToken };\r\n  }\r\n}\r\n\r\nexport default PushChannel;\r\n", "import { ActivationStateMachine } from 'plugins/push/pushactivation';\r\n\r\nfunction toBase64Url(arrayBuffer: ArrayBuffer) {\r\n  const buffer = new Uint8Array(arrayBuffer.slice(0, arrayBuffer.byteLength));\r\n  return btoa(String.fromCharCode.apply(null, Array.from(buffer)));\r\n}\r\n\r\nfunction urlBase64ToBase64(base64String: string) {\r\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\r\n  return base64;\r\n}\r\n\r\nfunction base64ToUint8Array(base64String: string) {\r\n  const rawData = window.atob(base64String);\r\n  const rawDataChars = [];\r\n  for (let i = 0; i < rawData.length; i++) {\r\n    rawDataChars.push(rawData[i].charCodeAt(0));\r\n  }\r\n  return Uint8Array.from(rawDataChars);\r\n}\r\n\r\nexport async function getW3CPushDeviceDetails(machine: ActivationStateMachine) {\r\n  const GettingPushDeviceDetailsFailed = machine.GettingPushDeviceDetailsFailed;\r\n  const GotPushDeviceDetails = machine.GotPushDeviceDetails;\r\n  const { ErrorInfo, Defaults } = machine.client;\r\n\r\n  const permission = await Notification.requestPermission();\r\n\r\n  if (permission !== 'granted') {\r\n    machine.handleEvent(\r\n      new GettingPushDeviceDetailsFailed(new ErrorInfo('User denied permission to send notifications', 400, 40000)),\r\n    );\r\n    return;\r\n  }\r\n\r\n  const swUrl = machine.client.options.pushServiceWorkerUrl;\r\n  if (!swUrl) {\r\n    machine.handleEvent(\r\n      new GettingPushDeviceDetailsFailed(new ErrorInfo('Missing ClientOptions.pushServiceWorkerUrl', 400, 40000)),\r\n    );\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const worker = await navigator.serviceWorker.register(swUrl);\r\n\r\n    machine._pushManager = worker.pushManager;\r\n\r\n    const headers = Defaults.defaultGetHeaders(machine.client.options, { format: 'text' });\r\n    const appServerKey = (\r\n      await machine.client.rest.Resource.get(machine.client, '/push/publicVapidKey', headers, {}, null, true)\r\n    ).body as string;\r\n\r\n    if (!worker.active) {\r\n      await navigator.serviceWorker.ready;\r\n    }\r\n\r\n    const subscription = await worker.pushManager.subscribe({\r\n      userVisibleOnly: true,\r\n      applicationServerKey: base64ToUint8Array(urlBase64ToBase64(appServerKey)),\r\n    });\r\n\r\n    const endpoint = subscription.endpoint;\r\n\r\n    const [p256dh, auth] = [subscription.getKey('p256dh'), subscription.getKey('auth')];\r\n\r\n    if (!p256dh || !auth) {\r\n      throw new ErrorInfo('Public key not found', 50000, 500);\r\n    }\r\n\r\n    const device = machine.client.device();\r\n    device.push.recipient = {\r\n      transportType: 'web',\r\n      targetUrl: btoa(endpoint),\r\n      publicVapidKey: appServerKey,\r\n      encryptionKey: {\r\n        p256dh: toBase64Url(p256dh),\r\n        auth: toBase64Url(auth),\r\n      },\r\n    };\r\n    device.persist();\r\n\r\n    machine.handleEvent(new GotPushDeviceDetails());\r\n  } catch (err) {\r\n    machine.handleEvent(\r\n      new GettingPushDeviceDetailsFailed(new ErrorInfo('Failed to register service worker', 50000, 500, err as Error)),\r\n    );\r\n  }\r\n}\r\n", "function createError(message) {\n    var err = new Error(message);\n    err.source = \"ulid\";\n    return err;\n}\n// These values should NEVER change. If\n// they do, we're no longer making ulids!\nvar ENCODING = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\"; // Crockford's Base32\nvar ENCODING_LEN = ENCODING.length;\nvar TIME_MAX = Math.pow(2, 48) - 1;\nvar TIME_LEN = 10;\nvar RANDOM_LEN = 16;\nfunction replaceCharAt(str, index, char) {\n    if (index > str.length - 1) {\n        return str;\n    }\n    return str.substr(0, index) + char + str.substr(index + 1);\n}\nfunction incrementBase32(str) {\n    var done = undefined;\n    var index = str.length;\n    var char = void 0;\n    var charIndex = void 0;\n    var maxCharIndex = ENCODING_LEN - 1;\n    while (!done && index-- >= 0) {\n        char = str[index];\n        charIndex = ENCODING.indexOf(char);\n        if (charIndex === -1) {\n            throw createError(\"incorrectly encoded string\");\n        }\n        if (charIndex === maxCharIndex) {\n            str = replaceCharAt(str, index, ENCODING[0]);\n            continue;\n        }\n        done = replaceCharAt(str, index, ENCODING[charIndex + 1]);\n    }\n    if (typeof done === \"string\") {\n        return done;\n    }\n    throw createError(\"cannot increment this string\");\n}\nfunction randomChar(prng) {\n    var rand = Math.floor(prng() * ENCODING_LEN);\n    if (rand === ENCODING_LEN) {\n        rand = ENCODING_LEN - 1;\n    }\n    return ENCODING.charAt(rand);\n}\nfunction encodeTime(now, len) {\n    if (isNaN(now)) {\n        throw new Error(now + \" must be a number\");\n    }\n    if (now > TIME_MAX) {\n        throw createError(\"cannot encode time greater than \" + TIME_MAX);\n    }\n    if (now < 0) {\n        throw createError(\"time must be positive\");\n    }\n    if (Number.isInteger(now) === false) {\n        throw createError(\"time must be an integer\");\n    }\n    var mod = void 0;\n    var str = \"\";\n    for (; len > 0; len--) {\n        mod = now % ENCODING_LEN;\n        str = ENCODING.charAt(mod) + str;\n        now = (now - mod) / ENCODING_LEN;\n    }\n    return str;\n}\nfunction encodeRandom(len, prng) {\n    var str = \"\";\n    for (; len > 0; len--) {\n        str = randomChar(prng) + str;\n    }\n    return str;\n}\nfunction decodeTime(id) {\n    if (id.length !== TIME_LEN + RANDOM_LEN) {\n        throw createError(\"malformed ulid\");\n    }\n    var time = id.substr(0, TIME_LEN).split(\"\").reverse().reduce(function (carry, char, index) {\n        var encodingIndex = ENCODING.indexOf(char);\n        if (encodingIndex === -1) {\n            throw createError(\"invalid character found: \" + char);\n        }\n        return carry += encodingIndex * Math.pow(ENCODING_LEN, index);\n    }, 0);\n    if (time > TIME_MAX) {\n        throw createError(\"malformed ulid, timestamp too large\");\n    }\n    return time;\n}\nfunction detectPrng() {\n    var allowInsecure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var root = arguments[1];\n\n    if (!root) {\n        root = typeof window !== \"undefined\" ? window : null;\n    }\n    var browserCrypto = root && (root.crypto || root.msCrypto);\n    if (browserCrypto) {\n        return function () {\n            var buffer = new Uint8Array(1);\n            browserCrypto.getRandomValues(buffer);\n            return buffer[0] / 0xff;\n        };\n    } else {\n        try {\n            var nodeCrypto = require(\"crypto\");\n            return function () {\n                return nodeCrypto.randomBytes(1).readUInt8() / 0xff;\n            };\n        } catch (e) {}\n    }\n    if (allowInsecure) {\n        try {\n            console.error(\"secure crypto unusable, falling back to insecure Math.random()!\");\n        } catch (e) {}\n        return function () {\n            return Math.random();\n        };\n    }\n    throw createError(\"secure crypto unusable, insecure Math.random not allowed\");\n}\nfunction factory(currPrng) {\n    if (!currPrng) {\n        currPrng = detectPrng();\n    }\n    return function ulid(seedTime) {\n        if (isNaN(seedTime)) {\n            seedTime = Date.now();\n        }\n        return encodeTime(seedTime, TIME_LEN) + encodeRandom(RANDOM_LEN, currPrng);\n    };\n}\nfunction monotonicFactory(currPrng) {\n    if (!currPrng) {\n        currPrng = detectPrng();\n    }\n    var lastTime = 0;\n    var lastRandom = void 0;\n    return function ulid(seedTime) {\n        if (isNaN(seedTime)) {\n            seedTime = Date.now();\n        }\n        if (seedTime <= lastTime) {\n            var incrementedRandom = lastRandom = incrementBase32(lastRandom);\n            return encodeTime(lastTime, TIME_LEN) + incrementedRandom;\n        }\n        lastTime = seedTime;\n        var newRandom = lastRandom = encodeRandom(RANDOM_LEN, currPrng);\n        return encodeTime(seedTime, TIME_LEN) + newRandom;\n    };\n}\nvar ulid = factory();\n\nexport { replaceCharAt, incrementBase32, randomChar, encodeTime, encodeRandom, decodeTime, detectPrng, factory, monotonicFactory, ulid };\n", "import * as API from '../../../ably';\r\nimport { IPlatformPushConfig } from 'common/types/IPlatformConfig';\r\nimport { ulid } from 'ulid';\r\nimport type { ErrCallback, StandardCallback } from 'common/types/utils';\r\nimport type ErrorInfo from 'common/lib/types/errorinfo';\r\nimport DeviceDetails, { DevicePlatform, DevicePushDetails } from 'common/lib/types/devicedetails';\r\nimport type PushChannelSubscription from 'common/lib/types/pushchannelsubscription';\r\nimport { getW3CPushDeviceDetails } from './getW3CDeviceDetails';\r\nimport type BaseClient from 'common/lib/client/baseclient';\r\nimport type { PaginatedResult } from 'common/lib/client/paginatedresource';\r\n\r\nconst persistKeys = {\r\n  deviceId: 'ably.push.deviceId',\r\n  deviceSecret: 'ably.push.deviceSecret',\r\n  deviceIdentityToken: 'ably.push.deviceIdentityToken',\r\n  pushRecipient: 'ably.push.pushRecipient',\r\n  activationState: 'ably.push.activationState',\r\n};\r\n\r\ntype DeviceRegistration = Required<{\r\n  [K in keyof DeviceDetails]: K extends 'deviceIdentityToken' ? API.TokenDetails : DeviceDetails[K];\r\n}>;\r\n\r\nexport type RegisterCallback = (device: DeviceDetails, callback: StandardCallback<DeviceRegistration>) => void;\r\nexport type DeregisterCallback = (device: DeviceDetails, callback: StandardCallback<string>) => void;\r\n\r\nexport interface LocalDeviceAuthDetails {\r\n  headers: Record<string, string>;\r\n  params: Record<string, unknown>;\r\n}\r\n\r\nexport type LocalDeviceFactory = ReturnType<typeof localDeviceFactory>;\r\nexport type LocalDevice = ReturnType<LocalDeviceFactory['load']>;\r\n\r\n/**\r\n * LocalDevice extends DeviceDetails, but DeviceDetails is part of core ably-js and LocalDevice is part of the Push plugin\r\n * In order to avoid bundling the DeviceDetails class in both core ably-js and the plugin, the LocalDevice is exported as\r\n * a factory, and the DeviceDetails constructor is used to create the class declaration for LocalDevice when the plugin is\r\n * loaded.\r\n */\r\nexport function localDeviceFactory(deviceDetails: typeof DeviceDetails) {\r\n  return class LocalDevice extends deviceDetails {\r\n    // guaranteed to be set in the .loadPersisted() method\r\n    declare id: string;\r\n    declare deviceSecret: string;\r\n\r\n    rest: BaseClient;\r\n    push: DevicePushDetails;\r\n\r\n    private constructor(rest: BaseClient) {\r\n      super();\r\n      this.push = {};\r\n      this.rest = rest;\r\n    }\r\n\r\n    static load(rest: BaseClient) {\r\n      const device = new LocalDevice(rest);\r\n      device.loadPersisted();\r\n      return device;\r\n    }\r\n\r\n    async listSubscriptions(): Promise<PaginatedResult<PushChannelSubscription>> {\r\n      const Platform = this.rest.Platform;\r\n      if (!Platform.Config.push) {\r\n        throw new this.rest.ErrorInfo('Push activation is not available on this platform', 40000, 400);\r\n      }\r\n\r\n      if (!this.id) {\r\n        throw new this.rest.ErrorInfo('Device not activated', 40000, 400);\r\n      }\r\n\r\n      if (!this.deviceIdentityToken) {\r\n        throw new this.rest.ErrorInfo('Cannot list device subscriptions without deviceIdentityToken', 50000, 500);\r\n      }\r\n\r\n      const client = this.rest,\r\n        format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n        envelope = client.http.supportsLinkHeaders ? undefined : format,\r\n        headers = client.Defaults.defaultGetHeaders(client.options, { format });\r\n\r\n      client.Utils.mixin(headers, client.options.headers, { 'X-Ably-DeviceToken': this.deviceIdentityToken });\r\n\r\n      return new client.rest.PaginatedResource(client, '/push/channelSubscriptions', headers, envelope, async function (\r\n        body,\r\n        headers,\r\n        unpacked,\r\n      ) {\r\n        return client.rest.PushChannelSubscription.fromResponseBody(\r\n          body as Record<string, unknown>[],\r\n          client._MsgPack,\r\n          unpacked ? undefined : format,\r\n        );\r\n      }).get({ deviceId: this.id });\r\n    }\r\n\r\n    loadPersisted() {\r\n      const Platform = this.rest.Platform;\r\n      if (!Platform.Config.push) {\r\n        throw new this.rest.ErrorInfo('Push activation is not available on this platform', 40000, 400);\r\n      }\r\n      this.platform = Platform.Config.push.platform;\r\n      this.clientId = this.rest.auth.clientId ?? undefined;\r\n      this.formFactor = Platform.Config.push.formFactor;\r\n      this.id = Platform.Config.push.storage.get(persistKeys.deviceId);\r\n\r\n      if (this.id) {\r\n        this.deviceSecret = Platform.Config.push.storage.get(persistKeys.deviceSecret);\r\n        this.deviceIdentityToken = JSON.parse(\r\n          Platform.Config.push.storage.get(persistKeys.deviceIdentityToken) || 'null',\r\n        );\r\n        this.push.recipient = JSON.parse(Platform.Config.push.storage.get(persistKeys.pushRecipient) || 'null');\r\n      } else {\r\n        this.resetId();\r\n      }\r\n    }\r\n\r\n    persist() {\r\n      const config = this.rest.Platform.Config;\r\n      if (!config.push) {\r\n        throw new this.rest.ErrorInfo('Push activation is not available on this platform', 40000, 400);\r\n      }\r\n      if (this.id) {\r\n        config.push.storage.set(persistKeys.deviceId, this.id);\r\n      }\r\n      if (this.deviceSecret) {\r\n        config.push.storage.set(persistKeys.deviceSecret, this.deviceSecret);\r\n      }\r\n      if (this.deviceIdentityToken) {\r\n        config.push.storage.set(persistKeys.deviceIdentityToken, JSON.stringify(this.deviceIdentityToken));\r\n      }\r\n      if (this.push.recipient) {\r\n        config.push.storage.set(persistKeys.pushRecipient, JSON.stringify(this.push.recipient));\r\n      }\r\n    }\r\n\r\n    resetId() {\r\n      this.id = ulid();\r\n      this.deviceSecret = ulid();\r\n      this.persist();\r\n    }\r\n\r\n    getAuthDetails(\r\n      rest: BaseClient,\r\n      headers: Record<string, string>,\r\n      params: Record<string, unknown>,\r\n    ): LocalDeviceAuthDetails {\r\n      if (!this.deviceIdentityToken) {\r\n        throw new this.rest.ErrorInfo('Unable to update device registration; no deviceIdentityToken', 50000, 500);\r\n      }\r\n      if (this.rest.http.supportsAuthHeaders) {\r\n        return {\r\n          headers: rest.Utils.mixin(\r\n            { authorization: 'Bearer ' + rest.Utils.toBase64(this.deviceIdentityToken) },\r\n            headers,\r\n          ) as Record<string, string>,\r\n          params,\r\n        };\r\n      } else {\r\n        return { headers, params: rest.Utils.mixin({ access_token: this.deviceIdentityToken }, params) };\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport class ActivationStateMachine {\r\n  client: BaseClient;\r\n  current: ActivationState;\r\n  pendingEvents: ActivationEvent[];\r\n  handling: boolean;\r\n  deactivatedCallback?: ErrCallback;\r\n  activatedCallback?: ErrCallback;\r\n  _pushConfig?: IPlatformPushConfig;\r\n  registerCallback?: RegisterCallback;\r\n  deregisterCallback?: DeregisterCallback;\r\n  updateFailedCallback?: ErrCallback;\r\n\r\n  // Used for testing\r\n  _pushManager?: PushManager;\r\n\r\n  // exported for testing\r\n  GettingPushDeviceDetailsFailed = GettingPushDeviceDetailsFailed;\r\n  GotPushDeviceDetails = GotPushDeviceDetails;\r\n\r\n  constructor(rest: BaseClient) {\r\n    this.client = rest;\r\n    this._pushConfig = rest.Platform.Config.push;\r\n    this.current = new ActivationStates[\r\n      (this.pushConfig.storage.get(persistKeys.activationState) as ActivationStateName) || 'NotActivated'\r\n    ](null);\r\n    this.pendingEvents = [];\r\n    this.handling = false;\r\n  }\r\n\r\n  get pushConfig() {\r\n    if (!this._pushConfig) {\r\n      throw new this.client.ErrorInfo('This platform is not supported as a target of push notifications', 40000, 400);\r\n    }\r\n    return this._pushConfig;\r\n  }\r\n\r\n  persist() {\r\n    if (isPersistentState(this.current)) {\r\n      this.pushConfig.storage.set(persistKeys.activationState, this.current.name);\r\n    }\r\n  }\r\n\r\n  callUpdateRegistrationFailedCallback(reason: ErrorInfo) {\r\n    if (this.updateFailedCallback) {\r\n      this.updateFailedCallback(reason);\r\n    } else {\r\n      this.client.Logger.logAction(\r\n        this.client.logger,\r\n        this.client.Logger.LOG_ERROR,\r\n        'UpdateRegistrationFailed',\r\n        'Failed updating device push registration: ' + this.client.Utils.inspectError(reason),\r\n      );\r\n    }\r\n  }\r\n\r\n  callCustomRegisterer(device: LocalDevice, isNew: boolean) {\r\n    this.registerCallback?.(device, (error: ErrorInfo, deviceRegistration?: DeviceRegistration) => {\r\n      if (error) {\r\n        if (isNew) {\r\n          this.handleEvent(new GettingDeviceRegistrationFailed(error));\r\n        } else {\r\n          this.handleEvent(new SyncRegistrationFailed(error));\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!deviceRegistration) {\r\n        this.handleEvent(\r\n          new GettingDeviceRegistrationFailed(\r\n            new this.client.ErrorInfo('registerCallback did not return deviceRegistration', 40000, 400),\r\n          ),\r\n        );\r\n      }\r\n\r\n      if (isNew) {\r\n        this.handleEvent(new GotDeviceRegistration(deviceRegistration as any));\r\n      } else {\r\n        this.handleEvent(new RegistrationSynced());\r\n      }\r\n    });\r\n  }\r\n\r\n  callCustomDeregisterer(device: LocalDevice) {\r\n    this.deregisterCallback?.(device, (err: ErrorInfo) => {\r\n      if (err) {\r\n        this.handleEvent(new DeregistrationFailed(err));\r\n        return;\r\n      }\r\n      this.handleEvent(new Deregistered());\r\n    });\r\n  }\r\n\r\n  async updateRegistration() {\r\n    const localDevice = this.client.device();\r\n    if (this.registerCallback) {\r\n      this.callCustomRegisterer(localDevice, false);\r\n    } else {\r\n      const client = this.client;\r\n      const format = client.options.useBinaryProtocol\r\n          ? this.client.Utils.Format.msgpack\r\n          : this.client.Utils.Format.json,\r\n        body = client.rest.DeviceDetails.fromLocalDevice(localDevice),\r\n        headers = this.client.Defaults.defaultPostHeaders(this.client.options, { format }),\r\n        params = {};\r\n\r\n      if (client.options.headers) {\r\n        this.client.Utils.mixin(headers, client.options.headers);\r\n      }\r\n\r\n      if (client.options.pushFullWait) {\r\n        this.client.Utils.mixin(params, { fullWait: 'true' });\r\n      }\r\n\r\n      const requestBody = this.client.Utils.encodeBody(body, client._MsgPack, format);\r\n      const authDetails = localDevice.getAuthDetails(client, headers, params);\r\n      try {\r\n        const response = await this.client.rest.Resource.patch(\r\n          client,\r\n          '/push/deviceRegistrations',\r\n          requestBody,\r\n          authDetails.headers,\r\n          authDetails.params,\r\n          format,\r\n          true,\r\n        );\r\n        this.handleEvent(new GotDeviceRegistration(response.body as DeviceRegistration));\r\n      } catch (err) {\r\n        this.handleEvent(new GettingDeviceRegistrationFailed(err as ErrorInfo));\r\n      }\r\n    }\r\n  }\r\n\r\n  async deregister() {\r\n    const device = this.client.device();\r\n    if (this.deregisterCallback) {\r\n      this.callCustomDeregisterer(device);\r\n    } else {\r\n      const rest = this.client;\r\n      const format = rest.options.useBinaryProtocol ? this.client.Utils.Format.msgpack : this.client.Utils.Format.json,\r\n        headers = this.client.Defaults.defaultPostHeaders(rest.options, { format }),\r\n        params = { deviceId: device.id };\r\n\r\n      if (rest.options.headers) this.client.Utils.mixin(headers, rest.options.headers);\r\n\r\n      const authDetails = this.client.device().getAuthDetails(this.client, headers, params);\r\n\r\n      if (rest.options.pushFullWait) this.client.Utils.mixin(params, { fullWait: 'true' });\r\n\r\n      try {\r\n        await this.client.rest.Resource.delete(\r\n          rest,\r\n          '/push/deviceRegistrations',\r\n          authDetails.headers,\r\n          authDetails.params,\r\n          format,\r\n          true,\r\n        );\r\n        this.handleEvent(new Deregistered());\r\n      } catch (err) {\r\n        this.handleEvent(new DeregistrationFailed(err as ErrorInfo));\r\n      }\r\n    }\r\n  }\r\n\r\n  callActivatedCallback(err: ErrorInfo | null) {\r\n    this.activatedCallback?.(err);\r\n    delete this.activatedCallback;\r\n  }\r\n\r\n  callDeactivatedCallback(err: ErrorInfo | null) {\r\n    this.deactivatedCallback?.(err);\r\n    delete this.deactivatedCallback;\r\n  }\r\n\r\n  handleEvent(event: ActivationEvent) {\r\n    if (this.handling) {\r\n      this.client.Platform.Config.nextTick(() => {\r\n        this.handleEvent(event);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.handling = true;\r\n    this.client.Logger.logAction(\r\n      this.client.logger,\r\n      this.client.Logger.LOG_MAJOR,\r\n      'Push.ActivationStateMachine.handleEvent()',\r\n      'handling event ' + event.name + ' from ' + this.current.name,\r\n    );\r\n\r\n    let maybeNext = this.current.processEvent(this, event);\r\n    if (!maybeNext) {\r\n      this.client.Logger.logAction(\r\n        this.client.logger,\r\n        this.client.Logger.LOG_MAJOR,\r\n        'Push.ActivationStateMachine.handleEvent()',\r\n        'enqueing event: ' + event.name,\r\n      );\r\n      this.pendingEvents.push(event);\r\n      this.handling = false;\r\n      return;\r\n    }\r\n\r\n    this.client.Logger.logAction(\r\n      this.client.logger,\r\n      this.client.Logger.LOG_MAJOR,\r\n      'Push.ActivationStateMachine.handleEvent()',\r\n      'transition: ' + this.current.name + ' -(' + event.name + ')-> ' + maybeNext.name,\r\n    );\r\n    this.current = maybeNext;\r\n\r\n    while (this.pendingEvents.length > 0) {\r\n      const pending = this.pendingEvents[0];\r\n\r\n      this.client.Logger.logAction(\r\n        this.client.logger,\r\n        this.client.Logger.LOG_MAJOR,\r\n        'Push.ActivationStateMachine.handleEvent()',\r\n        'attempting to consume pending event: ' + pending.name,\r\n      );\r\n\r\n      maybeNext = this.current.processEvent(this, pending);\r\n      if (!maybeNext) {\r\n        break;\r\n      }\r\n      this.pendingEvents.splice(0, 1);\r\n\r\n      this.client.Logger.logAction(\r\n        this.client.logger,\r\n        this.client.Logger.LOG_MAJOR,\r\n        'Push.ActivationStateMachine.handleEvent()',\r\n        'transition: ' + this.current.name + ' -(' + pending.name + ')-> ' + maybeNext.name,\r\n      );\r\n      this.current = maybeNext;\r\n    }\r\n\r\n    this.persist();\r\n    this.handling = false;\r\n  }\r\n}\r\n\r\n// Events\r\nexport class CalledActivate {\r\n  name = 'CalledActivate';\r\n\r\n  constructor(machine: ActivationStateMachine, registerCallback?: RegisterCallback) {\r\n    if (registerCallback) {\r\n      machine.registerCallback = registerCallback;\r\n    }\r\n    machine.persist();\r\n  }\r\n}\r\n\r\nexport class CalledDeactivate {\r\n  name = 'CalledDeactivate';\r\n\r\n  constructor(machine: ActivationStateMachine, deregisterCallback?: DeregisterCallback) {\r\n    machine.deregisterCallback = deregisterCallback;\r\n    machine.persist();\r\n  }\r\n}\r\n\r\nexport class GotPushDeviceDetails {\r\n  name = 'GotPushDeviceDetails';\r\n}\r\n\r\nexport class GettingPushDeviceDetailsFailed {\r\n  name = 'GettingPushDeviceDetailsFailed';\r\n  reason: ErrorInfo;\r\n\r\n  constructor(reason: ErrorInfo) {\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\nclass GotDeviceRegistration {\r\n  name = 'GotDeviceRegistration';\r\n  tokenDetails: API.TokenDetails;\r\n\r\n  constructor(deviceRegistration: DeviceRegistration) {\r\n    this.tokenDetails = deviceRegistration.deviceIdentityToken;\r\n  }\r\n}\r\n\r\nclass GettingDeviceRegistrationFailed {\r\n  name = 'GettingDeviceRegistrationFailed';\r\n  reason: ErrorInfo;\r\n  constructor(reason: ErrorInfo) {\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\nclass RegistrationSynced {\r\n  name = 'RegistrationSynced';\r\n}\r\n\r\nclass SyncRegistrationFailed {\r\n  name = 'SyncRegistrationFailed';\r\n  reason: ErrorInfo;\r\n\r\n  constructor(reason: ErrorInfo) {\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\nclass Deregistered {\r\n  name = 'Deregistered';\r\n}\r\n\r\nclass DeregistrationFailed {\r\n  name = 'DeregistrationFailed';\r\n  reason: ErrorInfo;\r\n  constructor(reason: ErrorInfo) {\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\ntype ActivationEvent =\r\n  | CalledActivate\r\n  | CalledDeactivate\r\n  | GotPushDeviceDetails\r\n  | GettingPushDeviceDetailsFailed\r\n  | GotDeviceRegistration\r\n  | GettingDeviceRegistrationFailed\r\n  | RegistrationSynced\r\n  | SyncRegistrationFailed\r\n  | Deregistered\r\n  | DeregistrationFailed;\r\n\r\n// States\r\nabstract class ActivationState {\r\n  name: ActivationStateName;\r\n\r\n  constructor(name: ActivationStateName) {\r\n    this.name = name;\r\n  }\r\n\r\n  abstract processEvent(machine: ActivationStateMachine, event: ActivationEvent): ActivationState | null;\r\n}\r\n\r\nclass NotActivated extends ActivationState {\r\n  constructor() {\r\n    super('NotActivated');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent): ActivationState | null {\r\n    if (event instanceof CalledDeactivate) {\r\n      machine.callDeactivatedCallback(null);\r\n      return new NotActivated();\r\n    } else if (event instanceof CalledActivate) {\r\n      const device = machine.client.device();\r\n\r\n      if (device.deviceIdentityToken != null) {\r\n        if (device.clientId && device.clientId !== machine.client.auth.clientId) {\r\n          machine.handleEvent(\r\n            new SyncRegistrationFailed(\r\n              new machine.client.ErrorInfo('clientId not compatible with local device clientId', 61002, 400),\r\n            ),\r\n          );\r\n          return null;\r\n        }\r\n        // Already registered.\r\n        machine.pendingEvents.push(event);\r\n        return new WaitingForNewPushDeviceDetails();\r\n      }\r\n\r\n      if (device.push.recipient) {\r\n        machine.pendingEvents.push(new GotPushDeviceDetails());\r\n      } else if (machine.pushConfig.getPushDeviceDetails) {\r\n        machine.pushConfig.getPushDeviceDetails?.(machine);\r\n      } else if (machine.pushConfig.platform === DevicePlatform.Browser) {\r\n        getW3CPushDeviceDetails(machine);\r\n      } else {\r\n        machine.handleEvent(\r\n          new GettingPushDeviceDetailsFailed(\r\n            new machine.client.ErrorInfo('No available implementation to get push device details', 50000, 500),\r\n          ),\r\n        );\r\n      }\r\n\r\n      return new WaitingForPushDeviceDetails();\r\n    } else if (event instanceof GotPushDeviceDetails) {\r\n      return new NotActivated();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForPushDeviceDetails extends ActivationState {\r\n  constructor() {\r\n    super('WaitingForPushDeviceDetails');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate) {\r\n      return new WaitingForPushDeviceDetails();\r\n    } else if (event instanceof CalledDeactivate) {\r\n      machine.callDeactivatedCallback(null);\r\n      return new NotActivated();\r\n    } else if (event instanceof GotPushDeviceDetails) {\r\n      const client = machine.client;\r\n      const device = client.device();\r\n\r\n      if (machine.registerCallback) {\r\n        machine.callCustomRegisterer(device, true);\r\n      } else {\r\n        const format = client.options.useBinaryProtocol\r\n            ? machine.client.Utils.Format.msgpack\r\n            : machine.client.Utils.Format.json,\r\n          body = client.rest.DeviceDetails.fromLocalDevice(device),\r\n          headers = machine.client.Defaults.defaultPostHeaders(client.options, { format }),\r\n          params = {};\r\n\r\n        if (client.options.headers) machine.client.Utils.mixin(headers, client.options.headers);\r\n\r\n        if (client.options.pushFullWait) machine.client.Utils.mixin(params, { fullWait: 'true' });\r\n\r\n        const requestBody = machine.client.Utils.encodeBody(body, client._MsgPack, format);\r\n\r\n        machine.client.rest.Resource.post(client, '/push/deviceRegistrations', requestBody, headers, params, null, true)\r\n          .then((response) => {\r\n            const deviceDetails = response.unpacked\r\n              ? response.body\r\n              : client.rest.DeviceDetails.fromResponseBody(response.body as any, client._MsgPack, format);\r\n            machine.handleEvent(new GotDeviceRegistration(deviceDetails as DeviceRegistration));\r\n          })\r\n          .catch((err) => {\r\n            machine.handleEvent(new GettingDeviceRegistrationFailed(err as ErrorInfo));\r\n          });\r\n      }\r\n\r\n      return new WaitingForDeviceRegistration();\r\n    } else if (event instanceof GettingPushDeviceDetailsFailed) {\r\n      machine.callActivatedCallback(event.reason);\r\n      return new NotActivated();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForDeviceRegistration extends ActivationState {\r\n  constructor() {\r\n    super('WaitingForDeviceRegistration');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate) {\r\n      return new WaitingForDeviceRegistration();\r\n    } else if (event instanceof GotDeviceRegistration) {\r\n      const device = machine.client.device();\r\n      device.deviceIdentityToken = event.tokenDetails.token;\r\n      device.persist();\r\n      machine.callActivatedCallback(null);\r\n      return new WaitingForNewPushDeviceDetails();\r\n    } else if (event instanceof GettingDeviceRegistrationFailed) {\r\n      machine.callActivatedCallback(event.reason);\r\n      return new NotActivated();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForNewPushDeviceDetails extends ActivationState {\r\n  constructor() {\r\n    super('WaitingForNewPushDeviceDetails');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate) {\r\n      machine.callActivatedCallback(null);\r\n      return new WaitingForNewPushDeviceDetails();\r\n    } else if (event instanceof CalledDeactivate) {\r\n      machine.deregister();\r\n      return new WaitingForDeregistration(this);\r\n    } else if (event instanceof GotPushDeviceDetails) {\r\n      machine.updateRegistration();\r\n      return new WaitingForRegistrationSync();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForRegistrationSync extends ActivationState {\r\n  triggeredByCalledActivate: boolean | null;\r\n\r\n  constructor(triggeredByCalledActivate: boolean | null = false) {\r\n    super('WaitingForRegistrationSync');\r\n    this.triggeredByCalledActivate = triggeredByCalledActivate;\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate && !this.triggeredByCalledActivate) {\r\n      machine.callActivatedCallback(null);\r\n      return new WaitingForRegistrationSync(true);\r\n    } else if (event instanceof RegistrationSynced) {\r\n      return new WaitingForNewPushDeviceDetails();\r\n    } else if (event instanceof SyncRegistrationFailed) {\r\n      machine.callUpdateRegistrationFailedCallback(event.reason);\r\n      return new AfterRegistrationSyncFailed();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass AfterRegistrationSyncFailed extends ActivationState {\r\n  constructor() {\r\n    super('AfterRegistrationSyncFailed');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate || event instanceof GotPushDeviceDetails) {\r\n      machine.updateRegistration();\r\n      return new WaitingForRegistrationSync(event instanceof CalledActivate);\r\n    } else if (event instanceof CalledDeactivate) {\r\n      machine.deregister();\r\n      return new WaitingForDeregistration(this);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForDeregistration extends ActivationState {\r\n  previousState: ActivationState | null;\r\n\r\n  constructor(previousState: ActivationState | null) {\r\n    super('WaitingForDeregistration');\r\n    this.previousState = previousState;\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent): ActivationState | null {\r\n    if (event instanceof CalledDeactivate) {\r\n      return new WaitingForDeregistration(this.previousState);\r\n    } else if (event instanceof Deregistered) {\r\n      const device = machine.client.device();\r\n      delete device.deviceIdentityToken;\r\n      delete device.push.recipient;\r\n      device.resetId();\r\n      device.persist();\r\n      machine.callDeactivatedCallback(null);\r\n      return new NotActivated();\r\n    } else if (event instanceof DeregistrationFailed) {\r\n      machine.callDeactivatedCallback(event.reason);\r\n      return this.previousState;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\ntype ActivationStateName =\r\n  | 'NotActivated'\r\n  | 'WaitingForPushDeviceDetails'\r\n  | 'WaitingForDeviceRegistration'\r\n  | 'WaitingForNewPushDeviceDetails'\r\n  | 'WaitingForRegistrationSync'\r\n  | 'AfterRegistrationSyncFailed'\r\n  | 'WaitingForDeregistration';\r\n\r\nexport const ActivationStates = {\r\n  NotActivated,\r\n  WaitingForPushDeviceDetails,\r\n  WaitingForDeviceRegistration,\r\n  WaitingForNewPushDeviceDetails,\r\n  WaitingForRegistrationSync,\r\n  AfterRegistrationSyncFailed,\r\n  WaitingForDeregistration,\r\n};\r\n\r\nfunction isPersistentState(state: ActivationState) {\r\n  return state.name == 'NotActivated' || state.name == 'WaitingForNewPushDeviceDetails';\r\n}\r\n"],
  "mappings": "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",
  "names": ["require_crypto", "__commonJSMin", "push_exports", "__export", "ActivationStateMachine", "CalledActivate", "CalledDeactivate", "pushchannel_default", "push_default", "getW3CPushDeviceDetails", "localDeviceFactory", "__toCommonJS", "PushChannel", "channel", "client", "device", "format", "body", "headers", "requestBody", "clientId", "params", "__spreadProps", "__spreadValues", "deviceIdentityToken", "pushchannel_default", "toBase64Url", "arrayBuffer", "buffer", "urlBase64ToBase64", "base64String", "padding", "base64ToUint8Array", "rawData", "rawDataChars", "i", "getW3CPushDeviceDetails", "machine", "GettingPushDeviceDetailsFailed", "GotPushDeviceDetails", "ErrorInfo", "Defaults", "swUrl", "worker", "headers", "appServerKey", "subscription", "endpoint", "p256dh", "auth", "device", "err", "createError", "message", "err", "ENCODING", "ENCODING_LEN", "TIME_MAX", "TIME_LEN", "RANDOM_LEN", "randomChar", "prng", "rand", "ENCODING_LEN", "ENCODING", "encodeTime", "now", "len", "TIME_MAX", "createError", "mod", "str", "encodeRandom", "detectPrng", "allowInsecure", "root", "browserCrypto", "buffer", "nodeCrypto", "e", "createError", "factory", "currPrng", "seedTime", "encodeTime", "TIME_LEN", "encodeRandom", "RANDOM_LEN", "ulid", "factory", "persistKeys", "localDeviceFactory", "deviceDetails", "LocalDevice", "rest", "device", "client", "format", "envelope", "headers", "body", "unpacked", "_a", "Platform", "config", "ulid", "params", "ActivationStateMachine", "GettingPushDeviceDetailsFailed", "GotPushDeviceDetails", "ActivationStates", "isPersistentState", "reason", "isNew", "error", "deviceRegistration", "GettingDeviceRegistrationFailed", "SyncRegistrationFailed", "GotDeviceRegistration", "RegistrationSynced", "err", "DeregistrationFailed", "Deregistered", "localDevice", "requestBody", "authDetails", "response", "event", "maybeNext", "pending", "CalledActivate", "machine", "registerCallback", "CalledDeactivate", "deregisterCallback", "ActivationState", "name", "NotActivated", "_NotActivated", "_b", "WaitingForNewPushDeviceDetails", "getW3CPushDeviceDetails", "WaitingForPushDeviceDetails", "_WaitingForPushDeviceDetails", "WaitingForDeviceRegistration", "_WaitingForDeviceRegistration", "_WaitingForNewPushDeviceDetails", "WaitingForDeregistration", "WaitingForRegistrationSync", "_WaitingForRegistrationSync", "triggeredByCalledActivate", "AfterRegistrationSyncFailed", "_WaitingForDeregistration", "previousState", "state", "push_default", "ActivationStateMachine", "localDeviceFactory", "CalledActivate", "CalledDeactivate", "pushchannel_default", "getW3CPushDeviceDetails"]
}
