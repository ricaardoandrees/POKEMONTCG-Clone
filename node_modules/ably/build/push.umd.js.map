{
  "version": 3,
  "sources": ["../node_modules/ulid/stubs/crypto.js", "../src/plugins/push/index.ts", "../src/plugins/push/pushchannel.ts", "../src/plugins/push/getW3CDeviceDetails.ts", "../node_modules/ulid/dist/index.esm.js", "../src/plugins/push/pushactivation.ts"],
  "sourcesContent": ["", "import PushChannel from './pushchannel';\nimport { getW3CPushDeviceDetails } from './getW3CDeviceDetails';\nimport { ActivationStateMachine, CalledActivate, CalledDeactivate, localDeviceFactory } from './pushactivation';\n\nexport {\n  ActivationStateMachine,\n  localDeviceFactory,\n  CalledActivate,\n  CalledDeactivate,\n  PushChannel,\n  getW3CPushDeviceDetails,\n};\n\nexport default {\n  ActivationStateMachine,\n  localDeviceFactory,\n  CalledActivate,\n  CalledDeactivate,\n  PushChannel,\n  getW3CPushDeviceDetails,\n};\n", "import type BaseClient from 'common/lib/client/baseclient';\r\nimport type RealtimeChannel from 'common/lib/client/realtimechannel';\r\nimport type RestChannel from 'common/lib/client/restchannel';\r\n\r\nclass PushChannel {\r\n  client: BaseClient;\r\n  channel: RestChannel | RealtimeChannel;\r\n\r\n  constructor(channel: RestChannel | RealtimeChannel) {\r\n    this.channel = channel;\r\n    this.client = channel.client;\r\n  }\r\n\r\n  async subscribeDevice() {\r\n    const client = this.client;\r\n    const device = client.device();\r\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n      body = { deviceId: device.id, channel: this.channel.name },\r\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\r\n\r\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\r\n\r\n    client.Utils.mixin(headers, this._getPushAuthHeaders());\r\n\r\n    const requestBody = client.Utils.encodeBody(body, client._MsgPack, format);\r\n    await client.rest.Resource.post(client, '/push/channelSubscriptions', requestBody, headers, {}, format, true);\r\n  }\r\n\r\n  async unsubscribeDevice() {\r\n    const client = this.client;\r\n    const device = client.device();\r\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\r\n\r\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\r\n\r\n    client.Utils.mixin(headers, this._getPushAuthHeaders());\r\n\r\n    await client.rest.Resource.delete(\r\n      client,\r\n      '/push/channelSubscriptions',\r\n      headers,\r\n      { deviceId: device.id, channel: this.channel.name },\r\n      format,\r\n      true,\r\n    );\r\n  }\r\n\r\n  async subscribeClient() {\r\n    const client = this.client;\r\n    const clientId = this.client.auth.clientId;\r\n    if (!clientId) {\r\n      throw new this.client.ErrorInfo('Cannot subscribe from client without client ID', 50000, 500);\r\n    }\r\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n      body = { clientId: clientId, channel: this.channel.name },\r\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\r\n\r\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\r\n\r\n    const requestBody = client.Utils.encodeBody(body, client._MsgPack, format);\r\n    await client.rest.Resource.post(client, '/push/channelSubscriptions', requestBody, headers, {}, format, true);\r\n  }\r\n\r\n  async unsubscribeClient() {\r\n    const client = this.client;\r\n\r\n    const clientId = this.client.auth.clientId;\r\n    if (!clientId) {\r\n      throw new this.client.ErrorInfo('Cannot unsubscribe from client without client ID', 50000, 500);\r\n    }\r\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\r\n\r\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\r\n\r\n    await client.rest.Resource.delete(\r\n      client,\r\n      '/push/channelSubscriptions',\r\n      headers,\r\n      { clientId: clientId, channel: this.channel.name },\r\n      format,\r\n      true,\r\n    );\r\n  }\r\n\r\n  async listSubscriptions(params?: Record<string, string>) {\r\n    this.client.Logger.logAction(\r\n      this.client.logger,\r\n      this.client.Logger.LOG_MICRO,\r\n      'PushChannel.listSubscriptions()',\r\n      'channel = ' + this.channel.name,\r\n    );\r\n\r\n    return this.client.push.admin.channelSubscriptions.list({\r\n      ...params,\r\n      channel: this.channel.name,\r\n      concatFilters: true,\r\n    });\r\n  }\r\n\r\n  private _getDeviceIdentityToken() {\r\n    const device = this.client.device();\r\n    const deviceIdentityToken = device.deviceIdentityToken;\r\n    if (deviceIdentityToken) {\r\n      return deviceIdentityToken;\r\n    } else {\r\n      throw new this.client.ErrorInfo('Cannot subscribe from client without deviceIdentityToken', 50000, 500);\r\n    }\r\n  }\r\n\r\n  private _getPushAuthHeaders() {\r\n    const deviceIdentityToken = this._getDeviceIdentityToken();\r\n    return { 'X-Ably-DeviceToken': deviceIdentityToken };\r\n  }\r\n}\r\n\r\nexport default PushChannel;\r\n", "import { ActivationStateMachine } from 'plugins/push/pushactivation';\r\n\r\nfunction toBase64Url(arrayBuffer: ArrayBuffer) {\r\n  const buffer = new Uint8Array(arrayBuffer.slice(0, arrayBuffer.byteLength));\r\n  return btoa(String.fromCharCode.apply(null, Array.from(buffer)));\r\n}\r\n\r\nfunction urlBase64ToBase64(base64String: string) {\r\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\r\n  return base64;\r\n}\r\n\r\nfunction base64ToUint8Array(base64String: string) {\r\n  const rawData = window.atob(base64String);\r\n  const rawDataChars = [];\r\n  for (let i = 0; i < rawData.length; i++) {\r\n    rawDataChars.push(rawData[i].charCodeAt(0));\r\n  }\r\n  return Uint8Array.from(rawDataChars);\r\n}\r\n\r\nexport async function getW3CPushDeviceDetails(machine: ActivationStateMachine) {\r\n  const GettingPushDeviceDetailsFailed = machine.GettingPushDeviceDetailsFailed;\r\n  const GotPushDeviceDetails = machine.GotPushDeviceDetails;\r\n  const { ErrorInfo, Defaults } = machine.client;\r\n\r\n  const permission = await Notification.requestPermission();\r\n\r\n  if (permission !== 'granted') {\r\n    machine.handleEvent(\r\n      new GettingPushDeviceDetailsFailed(new ErrorInfo('User denied permission to send notifications', 400, 40000)),\r\n    );\r\n    return;\r\n  }\r\n\r\n  const swUrl = machine.client.options.pushServiceWorkerUrl;\r\n  if (!swUrl) {\r\n    machine.handleEvent(\r\n      new GettingPushDeviceDetailsFailed(new ErrorInfo('Missing ClientOptions.pushServiceWorkerUrl', 400, 40000)),\r\n    );\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const worker = await navigator.serviceWorker.register(swUrl);\r\n\r\n    machine._pushManager = worker.pushManager;\r\n\r\n    const headers = Defaults.defaultGetHeaders(machine.client.options, { format: 'text' });\r\n    const appServerKey = (\r\n      await machine.client.rest.Resource.get(machine.client, '/push/publicVapidKey', headers, {}, null, true)\r\n    ).body as string;\r\n\r\n    if (!worker.active) {\r\n      await navigator.serviceWorker.ready;\r\n    }\r\n\r\n    const subscription = await worker.pushManager.subscribe({\r\n      userVisibleOnly: true,\r\n      applicationServerKey: base64ToUint8Array(urlBase64ToBase64(appServerKey)),\r\n    });\r\n\r\n    const endpoint = subscription.endpoint;\r\n\r\n    const [p256dh, auth] = [subscription.getKey('p256dh'), subscription.getKey('auth')];\r\n\r\n    if (!p256dh || !auth) {\r\n      throw new ErrorInfo('Public key not found', 50000, 500);\r\n    }\r\n\r\n    const device = machine.client.device();\r\n    device.push.recipient = {\r\n      transportType: 'web',\r\n      targetUrl: btoa(endpoint),\r\n      publicVapidKey: appServerKey,\r\n      encryptionKey: {\r\n        p256dh: toBase64Url(p256dh),\r\n        auth: toBase64Url(auth),\r\n      },\r\n    };\r\n    device.persist();\r\n\r\n    machine.handleEvent(new GotPushDeviceDetails());\r\n  } catch (err) {\r\n    machine.handleEvent(\r\n      new GettingPushDeviceDetailsFailed(new ErrorInfo('Failed to register service worker', 50000, 500, err as Error)),\r\n    );\r\n  }\r\n}\r\n", "function createError(message) {\n    var err = new Error(message);\n    err.source = \"ulid\";\n    return err;\n}\n// These values should NEVER change. If\n// they do, we're no longer making ulids!\nvar ENCODING = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\"; // Crockford's Base32\nvar ENCODING_LEN = ENCODING.length;\nvar TIME_MAX = Math.pow(2, 48) - 1;\nvar TIME_LEN = 10;\nvar RANDOM_LEN = 16;\nfunction replaceCharAt(str, index, char) {\n    if (index > str.length - 1) {\n        return str;\n    }\n    return str.substr(0, index) + char + str.substr(index + 1);\n}\nfunction incrementBase32(str) {\n    var done = undefined;\n    var index = str.length;\n    var char = void 0;\n    var charIndex = void 0;\n    var maxCharIndex = ENCODING_LEN - 1;\n    while (!done && index-- >= 0) {\n        char = str[index];\n        charIndex = ENCODING.indexOf(char);\n        if (charIndex === -1) {\n            throw createError(\"incorrectly encoded string\");\n        }\n        if (charIndex === maxCharIndex) {\n            str = replaceCharAt(str, index, ENCODING[0]);\n            continue;\n        }\n        done = replaceCharAt(str, index, ENCODING[charIndex + 1]);\n    }\n    if (typeof done === \"string\") {\n        return done;\n    }\n    throw createError(\"cannot increment this string\");\n}\nfunction randomChar(prng) {\n    var rand = Math.floor(prng() * ENCODING_LEN);\n    if (rand === ENCODING_LEN) {\n        rand = ENCODING_LEN - 1;\n    }\n    return ENCODING.charAt(rand);\n}\nfunction encodeTime(now, len) {\n    if (isNaN(now)) {\n        throw new Error(now + \" must be a number\");\n    }\n    if (now > TIME_MAX) {\n        throw createError(\"cannot encode time greater than \" + TIME_MAX);\n    }\n    if (now < 0) {\n        throw createError(\"time must be positive\");\n    }\n    if (Number.isInteger(now) === false) {\n        throw createError(\"time must be an integer\");\n    }\n    var mod = void 0;\n    var str = \"\";\n    for (; len > 0; len--) {\n        mod = now % ENCODING_LEN;\n        str = ENCODING.charAt(mod) + str;\n        now = (now - mod) / ENCODING_LEN;\n    }\n    return str;\n}\nfunction encodeRandom(len, prng) {\n    var str = \"\";\n    for (; len > 0; len--) {\n        str = randomChar(prng) + str;\n    }\n    return str;\n}\nfunction decodeTime(id) {\n    if (id.length !== TIME_LEN + RANDOM_LEN) {\n        throw createError(\"malformed ulid\");\n    }\n    var time = id.substr(0, TIME_LEN).split(\"\").reverse().reduce(function (carry, char, index) {\n        var encodingIndex = ENCODING.indexOf(char);\n        if (encodingIndex === -1) {\n            throw createError(\"invalid character found: \" + char);\n        }\n        return carry += encodingIndex * Math.pow(ENCODING_LEN, index);\n    }, 0);\n    if (time > TIME_MAX) {\n        throw createError(\"malformed ulid, timestamp too large\");\n    }\n    return time;\n}\nfunction detectPrng() {\n    var allowInsecure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var root = arguments[1];\n\n    if (!root) {\n        root = typeof window !== \"undefined\" ? window : null;\n    }\n    var browserCrypto = root && (root.crypto || root.msCrypto);\n    if (browserCrypto) {\n        return function () {\n            var buffer = new Uint8Array(1);\n            browserCrypto.getRandomValues(buffer);\n            return buffer[0] / 0xff;\n        };\n    } else {\n        try {\n            var nodeCrypto = require(\"crypto\");\n            return function () {\n                return nodeCrypto.randomBytes(1).readUInt8() / 0xff;\n            };\n        } catch (e) {}\n    }\n    if (allowInsecure) {\n        try {\n            console.error(\"secure crypto unusable, falling back to insecure Math.random()!\");\n        } catch (e) {}\n        return function () {\n            return Math.random();\n        };\n    }\n    throw createError(\"secure crypto unusable, insecure Math.random not allowed\");\n}\nfunction factory(currPrng) {\n    if (!currPrng) {\n        currPrng = detectPrng();\n    }\n    return function ulid(seedTime) {\n        if (isNaN(seedTime)) {\n            seedTime = Date.now();\n        }\n        return encodeTime(seedTime, TIME_LEN) + encodeRandom(RANDOM_LEN, currPrng);\n    };\n}\nfunction monotonicFactory(currPrng) {\n    if (!currPrng) {\n        currPrng = detectPrng();\n    }\n    var lastTime = 0;\n    var lastRandom = void 0;\n    return function ulid(seedTime) {\n        if (isNaN(seedTime)) {\n            seedTime = Date.now();\n        }\n        if (seedTime <= lastTime) {\n            var incrementedRandom = lastRandom = incrementBase32(lastRandom);\n            return encodeTime(lastTime, TIME_LEN) + incrementedRandom;\n        }\n        lastTime = seedTime;\n        var newRandom = lastRandom = encodeRandom(RANDOM_LEN, currPrng);\n        return encodeTime(seedTime, TIME_LEN) + newRandom;\n    };\n}\nvar ulid = factory();\n\nexport { replaceCharAt, incrementBase32, randomChar, encodeTime, encodeRandom, decodeTime, detectPrng, factory, monotonicFactory, ulid };\n", "import * as API from '../../../ably';\r\nimport { IPlatformPushConfig } from 'common/types/IPlatformConfig';\r\nimport { ulid } from 'ulid';\r\nimport type { ErrCallback, StandardCallback } from 'common/types/utils';\r\nimport type ErrorInfo from 'common/lib/types/errorinfo';\r\nimport DeviceDetails, { DevicePlatform, DevicePushDetails } from 'common/lib/types/devicedetails';\r\nimport type PushChannelSubscription from 'common/lib/types/pushchannelsubscription';\r\nimport { getW3CPushDeviceDetails } from './getW3CDeviceDetails';\r\nimport type BaseClient from 'common/lib/client/baseclient';\r\nimport type { PaginatedResult } from 'common/lib/client/paginatedresource';\r\n\r\nconst persistKeys = {\r\n  deviceId: 'ably.push.deviceId',\r\n  deviceSecret: 'ably.push.deviceSecret',\r\n  deviceIdentityToken: 'ably.push.deviceIdentityToken',\r\n  pushRecipient: 'ably.push.pushRecipient',\r\n  activationState: 'ably.push.activationState',\r\n};\r\n\r\ntype DeviceRegistration = Required<{\r\n  [K in keyof DeviceDetails]: K extends 'deviceIdentityToken' ? API.TokenDetails : DeviceDetails[K];\r\n}>;\r\n\r\nexport type RegisterCallback = (device: DeviceDetails, callback: StandardCallback<DeviceRegistration>) => void;\r\nexport type DeregisterCallback = (device: DeviceDetails, callback: StandardCallback<string>) => void;\r\n\r\nexport interface LocalDeviceAuthDetails {\r\n  headers: Record<string, string>;\r\n  params: Record<string, unknown>;\r\n}\r\n\r\nexport type LocalDeviceFactory = ReturnType<typeof localDeviceFactory>;\r\nexport type LocalDevice = ReturnType<LocalDeviceFactory['load']>;\r\n\r\n/**\r\n * LocalDevice extends DeviceDetails, but DeviceDetails is part of core ably-js and LocalDevice is part of the Push plugin\r\n * In order to avoid bundling the DeviceDetails class in both core ably-js and the plugin, the LocalDevice is exported as\r\n * a factory, and the DeviceDetails constructor is used to create the class declaration for LocalDevice when the plugin is\r\n * loaded.\r\n */\r\nexport function localDeviceFactory(deviceDetails: typeof DeviceDetails) {\r\n  return class LocalDevice extends deviceDetails {\r\n    // guaranteed to be set in the .loadPersisted() method\r\n    declare id: string;\r\n    declare deviceSecret: string;\r\n\r\n    rest: BaseClient;\r\n    push: DevicePushDetails;\r\n\r\n    private constructor(rest: BaseClient) {\r\n      super();\r\n      this.push = {};\r\n      this.rest = rest;\r\n    }\r\n\r\n    static load(rest: BaseClient) {\r\n      const device = new LocalDevice(rest);\r\n      device.loadPersisted();\r\n      return device;\r\n    }\r\n\r\n    async listSubscriptions(): Promise<PaginatedResult<PushChannelSubscription>> {\r\n      const Platform = this.rest.Platform;\r\n      if (!Platform.Config.push) {\r\n        throw new this.rest.ErrorInfo('Push activation is not available on this platform', 40000, 400);\r\n      }\r\n\r\n      if (!this.id) {\r\n        throw new this.rest.ErrorInfo('Device not activated', 40000, 400);\r\n      }\r\n\r\n      if (!this.deviceIdentityToken) {\r\n        throw new this.rest.ErrorInfo('Cannot list device subscriptions without deviceIdentityToken', 50000, 500);\r\n      }\r\n\r\n      const client = this.rest,\r\n        format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\r\n        envelope = client.http.supportsLinkHeaders ? undefined : format,\r\n        headers = client.Defaults.defaultGetHeaders(client.options, { format });\r\n\r\n      client.Utils.mixin(headers, client.options.headers, { 'X-Ably-DeviceToken': this.deviceIdentityToken });\r\n\r\n      return new client.rest.PaginatedResource(client, '/push/channelSubscriptions', headers, envelope, async function (\r\n        body,\r\n        headers,\r\n        unpacked,\r\n      ) {\r\n        return client.rest.PushChannelSubscription.fromResponseBody(\r\n          body as Record<string, unknown>[],\r\n          client._MsgPack,\r\n          unpacked ? undefined : format,\r\n        );\r\n      }).get({ deviceId: this.id });\r\n    }\r\n\r\n    loadPersisted() {\r\n      const Platform = this.rest.Platform;\r\n      if (!Platform.Config.push) {\r\n        throw new this.rest.ErrorInfo('Push activation is not available on this platform', 40000, 400);\r\n      }\r\n      this.platform = Platform.Config.push.platform;\r\n      this.clientId = this.rest.auth.clientId ?? undefined;\r\n      this.formFactor = Platform.Config.push.formFactor;\r\n      this.id = Platform.Config.push.storage.get(persistKeys.deviceId);\r\n\r\n      if (this.id) {\r\n        this.deviceSecret = Platform.Config.push.storage.get(persistKeys.deviceSecret);\r\n        this.deviceIdentityToken = JSON.parse(\r\n          Platform.Config.push.storage.get(persistKeys.deviceIdentityToken) || 'null',\r\n        );\r\n        this.push.recipient = JSON.parse(Platform.Config.push.storage.get(persistKeys.pushRecipient) || 'null');\r\n      } else {\r\n        this.resetId();\r\n      }\r\n    }\r\n\r\n    persist() {\r\n      const config = this.rest.Platform.Config;\r\n      if (!config.push) {\r\n        throw new this.rest.ErrorInfo('Push activation is not available on this platform', 40000, 400);\r\n      }\r\n      if (this.id) {\r\n        config.push.storage.set(persistKeys.deviceId, this.id);\r\n      }\r\n      if (this.deviceSecret) {\r\n        config.push.storage.set(persistKeys.deviceSecret, this.deviceSecret);\r\n      }\r\n      if (this.deviceIdentityToken) {\r\n        config.push.storage.set(persistKeys.deviceIdentityToken, JSON.stringify(this.deviceIdentityToken));\r\n      }\r\n      if (this.push.recipient) {\r\n        config.push.storage.set(persistKeys.pushRecipient, JSON.stringify(this.push.recipient));\r\n      }\r\n    }\r\n\r\n    resetId() {\r\n      this.id = ulid();\r\n      this.deviceSecret = ulid();\r\n      this.persist();\r\n    }\r\n\r\n    getAuthDetails(\r\n      rest: BaseClient,\r\n      headers: Record<string, string>,\r\n      params: Record<string, unknown>,\r\n    ): LocalDeviceAuthDetails {\r\n      if (!this.deviceIdentityToken) {\r\n        throw new this.rest.ErrorInfo('Unable to update device registration; no deviceIdentityToken', 50000, 500);\r\n      }\r\n      if (this.rest.http.supportsAuthHeaders) {\r\n        return {\r\n          headers: rest.Utils.mixin(\r\n            { authorization: 'Bearer ' + rest.Utils.toBase64(this.deviceIdentityToken) },\r\n            headers,\r\n          ) as Record<string, string>,\r\n          params,\r\n        };\r\n      } else {\r\n        return { headers, params: rest.Utils.mixin({ access_token: this.deviceIdentityToken }, params) };\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport class ActivationStateMachine {\r\n  client: BaseClient;\r\n  current: ActivationState;\r\n  pendingEvents: ActivationEvent[];\r\n  handling: boolean;\r\n  deactivatedCallback?: ErrCallback;\r\n  activatedCallback?: ErrCallback;\r\n  _pushConfig?: IPlatformPushConfig;\r\n  registerCallback?: RegisterCallback;\r\n  deregisterCallback?: DeregisterCallback;\r\n  updateFailedCallback?: ErrCallback;\r\n\r\n  // Used for testing\r\n  _pushManager?: PushManager;\r\n\r\n  // exported for testing\r\n  GettingPushDeviceDetailsFailed = GettingPushDeviceDetailsFailed;\r\n  GotPushDeviceDetails = GotPushDeviceDetails;\r\n\r\n  constructor(rest: BaseClient) {\r\n    this.client = rest;\r\n    this._pushConfig = rest.Platform.Config.push;\r\n    this.current = new ActivationStates[\r\n      (this.pushConfig.storage.get(persistKeys.activationState) as ActivationStateName) || 'NotActivated'\r\n    ](null);\r\n    this.pendingEvents = [];\r\n    this.handling = false;\r\n  }\r\n\r\n  get pushConfig() {\r\n    if (!this._pushConfig) {\r\n      throw new this.client.ErrorInfo('This platform is not supported as a target of push notifications', 40000, 400);\r\n    }\r\n    return this._pushConfig;\r\n  }\r\n\r\n  persist() {\r\n    if (isPersistentState(this.current)) {\r\n      this.pushConfig.storage.set(persistKeys.activationState, this.current.name);\r\n    }\r\n  }\r\n\r\n  callUpdateRegistrationFailedCallback(reason: ErrorInfo) {\r\n    if (this.updateFailedCallback) {\r\n      this.updateFailedCallback(reason);\r\n    } else {\r\n      this.client.Logger.logAction(\r\n        this.client.logger,\r\n        this.client.Logger.LOG_ERROR,\r\n        'UpdateRegistrationFailed',\r\n        'Failed updating device push registration: ' + this.client.Utils.inspectError(reason),\r\n      );\r\n    }\r\n  }\r\n\r\n  callCustomRegisterer(device: LocalDevice, isNew: boolean) {\r\n    this.registerCallback?.(device, (error: ErrorInfo, deviceRegistration?: DeviceRegistration) => {\r\n      if (error) {\r\n        if (isNew) {\r\n          this.handleEvent(new GettingDeviceRegistrationFailed(error));\r\n        } else {\r\n          this.handleEvent(new SyncRegistrationFailed(error));\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!deviceRegistration) {\r\n        this.handleEvent(\r\n          new GettingDeviceRegistrationFailed(\r\n            new this.client.ErrorInfo('registerCallback did not return deviceRegistration', 40000, 400),\r\n          ),\r\n        );\r\n      }\r\n\r\n      if (isNew) {\r\n        this.handleEvent(new GotDeviceRegistration(deviceRegistration as any));\r\n      } else {\r\n        this.handleEvent(new RegistrationSynced());\r\n      }\r\n    });\r\n  }\r\n\r\n  callCustomDeregisterer(device: LocalDevice) {\r\n    this.deregisterCallback?.(device, (err: ErrorInfo) => {\r\n      if (err) {\r\n        this.handleEvent(new DeregistrationFailed(err));\r\n        return;\r\n      }\r\n      this.handleEvent(new Deregistered());\r\n    });\r\n  }\r\n\r\n  async updateRegistration() {\r\n    const localDevice = this.client.device();\r\n    if (this.registerCallback) {\r\n      this.callCustomRegisterer(localDevice, false);\r\n    } else {\r\n      const client = this.client;\r\n      const format = client.options.useBinaryProtocol\r\n          ? this.client.Utils.Format.msgpack\r\n          : this.client.Utils.Format.json,\r\n        body = client.rest.DeviceDetails.fromLocalDevice(localDevice),\r\n        headers = this.client.Defaults.defaultPostHeaders(this.client.options, { format }),\r\n        params = {};\r\n\r\n      if (client.options.headers) {\r\n        this.client.Utils.mixin(headers, client.options.headers);\r\n      }\r\n\r\n      if (client.options.pushFullWait) {\r\n        this.client.Utils.mixin(params, { fullWait: 'true' });\r\n      }\r\n\r\n      const requestBody = this.client.Utils.encodeBody(body, client._MsgPack, format);\r\n      const authDetails = localDevice.getAuthDetails(client, headers, params);\r\n      try {\r\n        const response = await this.client.rest.Resource.patch(\r\n          client,\r\n          '/push/deviceRegistrations',\r\n          requestBody,\r\n          authDetails.headers,\r\n          authDetails.params,\r\n          format,\r\n          true,\r\n        );\r\n        this.handleEvent(new GotDeviceRegistration(response.body as DeviceRegistration));\r\n      } catch (err) {\r\n        this.handleEvent(new GettingDeviceRegistrationFailed(err as ErrorInfo));\r\n      }\r\n    }\r\n  }\r\n\r\n  async deregister() {\r\n    const device = this.client.device();\r\n    if (this.deregisterCallback) {\r\n      this.callCustomDeregisterer(device);\r\n    } else {\r\n      const rest = this.client;\r\n      const format = rest.options.useBinaryProtocol ? this.client.Utils.Format.msgpack : this.client.Utils.Format.json,\r\n        headers = this.client.Defaults.defaultPostHeaders(rest.options, { format }),\r\n        params = { deviceId: device.id };\r\n\r\n      if (rest.options.headers) this.client.Utils.mixin(headers, rest.options.headers);\r\n\r\n      const authDetails = this.client.device().getAuthDetails(this.client, headers, params);\r\n\r\n      if (rest.options.pushFullWait) this.client.Utils.mixin(params, { fullWait: 'true' });\r\n\r\n      try {\r\n        await this.client.rest.Resource.delete(\r\n          rest,\r\n          '/push/deviceRegistrations',\r\n          authDetails.headers,\r\n          authDetails.params,\r\n          format,\r\n          true,\r\n        );\r\n        this.handleEvent(new Deregistered());\r\n      } catch (err) {\r\n        this.handleEvent(new DeregistrationFailed(err as ErrorInfo));\r\n      }\r\n    }\r\n  }\r\n\r\n  callActivatedCallback(err: ErrorInfo | null) {\r\n    this.activatedCallback?.(err);\r\n    delete this.activatedCallback;\r\n  }\r\n\r\n  callDeactivatedCallback(err: ErrorInfo | null) {\r\n    this.deactivatedCallback?.(err);\r\n    delete this.deactivatedCallback;\r\n  }\r\n\r\n  handleEvent(event: ActivationEvent) {\r\n    if (this.handling) {\r\n      this.client.Platform.Config.nextTick(() => {\r\n        this.handleEvent(event);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.handling = true;\r\n    this.client.Logger.logAction(\r\n      this.client.logger,\r\n      this.client.Logger.LOG_MAJOR,\r\n      'Push.ActivationStateMachine.handleEvent()',\r\n      'handling event ' + event.name + ' from ' + this.current.name,\r\n    );\r\n\r\n    let maybeNext = this.current.processEvent(this, event);\r\n    if (!maybeNext) {\r\n      this.client.Logger.logAction(\r\n        this.client.logger,\r\n        this.client.Logger.LOG_MAJOR,\r\n        'Push.ActivationStateMachine.handleEvent()',\r\n        'enqueing event: ' + event.name,\r\n      );\r\n      this.pendingEvents.push(event);\r\n      this.handling = false;\r\n      return;\r\n    }\r\n\r\n    this.client.Logger.logAction(\r\n      this.client.logger,\r\n      this.client.Logger.LOG_MAJOR,\r\n      'Push.ActivationStateMachine.handleEvent()',\r\n      'transition: ' + this.current.name + ' -(' + event.name + ')-> ' + maybeNext.name,\r\n    );\r\n    this.current = maybeNext;\r\n\r\n    while (this.pendingEvents.length > 0) {\r\n      const pending = this.pendingEvents[0];\r\n\r\n      this.client.Logger.logAction(\r\n        this.client.logger,\r\n        this.client.Logger.LOG_MAJOR,\r\n        'Push.ActivationStateMachine.handleEvent()',\r\n        'attempting to consume pending event: ' + pending.name,\r\n      );\r\n\r\n      maybeNext = this.current.processEvent(this, pending);\r\n      if (!maybeNext) {\r\n        break;\r\n      }\r\n      this.pendingEvents.splice(0, 1);\r\n\r\n      this.client.Logger.logAction(\r\n        this.client.logger,\r\n        this.client.Logger.LOG_MAJOR,\r\n        'Push.ActivationStateMachine.handleEvent()',\r\n        'transition: ' + this.current.name + ' -(' + pending.name + ')-> ' + maybeNext.name,\r\n      );\r\n      this.current = maybeNext;\r\n    }\r\n\r\n    this.persist();\r\n    this.handling = false;\r\n  }\r\n}\r\n\r\n// Events\r\nexport class CalledActivate {\r\n  name = 'CalledActivate';\r\n\r\n  constructor(machine: ActivationStateMachine, registerCallback?: RegisterCallback) {\r\n    if (registerCallback) {\r\n      machine.registerCallback = registerCallback;\r\n    }\r\n    machine.persist();\r\n  }\r\n}\r\n\r\nexport class CalledDeactivate {\r\n  name = 'CalledDeactivate';\r\n\r\n  constructor(machine: ActivationStateMachine, deregisterCallback?: DeregisterCallback) {\r\n    machine.deregisterCallback = deregisterCallback;\r\n    machine.persist();\r\n  }\r\n}\r\n\r\nexport class GotPushDeviceDetails {\r\n  name = 'GotPushDeviceDetails';\r\n}\r\n\r\nexport class GettingPushDeviceDetailsFailed {\r\n  name = 'GettingPushDeviceDetailsFailed';\r\n  reason: ErrorInfo;\r\n\r\n  constructor(reason: ErrorInfo) {\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\nclass GotDeviceRegistration {\r\n  name = 'GotDeviceRegistration';\r\n  tokenDetails: API.TokenDetails;\r\n\r\n  constructor(deviceRegistration: DeviceRegistration) {\r\n    this.tokenDetails = deviceRegistration.deviceIdentityToken;\r\n  }\r\n}\r\n\r\nclass GettingDeviceRegistrationFailed {\r\n  name = 'GettingDeviceRegistrationFailed';\r\n  reason: ErrorInfo;\r\n  constructor(reason: ErrorInfo) {\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\nclass RegistrationSynced {\r\n  name = 'RegistrationSynced';\r\n}\r\n\r\nclass SyncRegistrationFailed {\r\n  name = 'SyncRegistrationFailed';\r\n  reason: ErrorInfo;\r\n\r\n  constructor(reason: ErrorInfo) {\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\nclass Deregistered {\r\n  name = 'Deregistered';\r\n}\r\n\r\nclass DeregistrationFailed {\r\n  name = 'DeregistrationFailed';\r\n  reason: ErrorInfo;\r\n  constructor(reason: ErrorInfo) {\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\ntype ActivationEvent =\r\n  | CalledActivate\r\n  | CalledDeactivate\r\n  | GotPushDeviceDetails\r\n  | GettingPushDeviceDetailsFailed\r\n  | GotDeviceRegistration\r\n  | GettingDeviceRegistrationFailed\r\n  | RegistrationSynced\r\n  | SyncRegistrationFailed\r\n  | Deregistered\r\n  | DeregistrationFailed;\r\n\r\n// States\r\nabstract class ActivationState {\r\n  name: ActivationStateName;\r\n\r\n  constructor(name: ActivationStateName) {\r\n    this.name = name;\r\n  }\r\n\r\n  abstract processEvent(machine: ActivationStateMachine, event: ActivationEvent): ActivationState | null;\r\n}\r\n\r\nclass NotActivated extends ActivationState {\r\n  constructor() {\r\n    super('NotActivated');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent): ActivationState | null {\r\n    if (event instanceof CalledDeactivate) {\r\n      machine.callDeactivatedCallback(null);\r\n      return new NotActivated();\r\n    } else if (event instanceof CalledActivate) {\r\n      const device = machine.client.device();\r\n\r\n      if (device.deviceIdentityToken != null) {\r\n        if (device.clientId && device.clientId !== machine.client.auth.clientId) {\r\n          machine.handleEvent(\r\n            new SyncRegistrationFailed(\r\n              new machine.client.ErrorInfo('clientId not compatible with local device clientId', 61002, 400),\r\n            ),\r\n          );\r\n          return null;\r\n        }\r\n        // Already registered.\r\n        machine.pendingEvents.push(event);\r\n        return new WaitingForNewPushDeviceDetails();\r\n      }\r\n\r\n      if (device.push.recipient) {\r\n        machine.pendingEvents.push(new GotPushDeviceDetails());\r\n      } else if (machine.pushConfig.getPushDeviceDetails) {\r\n        machine.pushConfig.getPushDeviceDetails?.(machine);\r\n      } else if (machine.pushConfig.platform === DevicePlatform.Browser) {\r\n        getW3CPushDeviceDetails(machine);\r\n      } else {\r\n        machine.handleEvent(\r\n          new GettingPushDeviceDetailsFailed(\r\n            new machine.client.ErrorInfo('No available implementation to get push device details', 50000, 500),\r\n          ),\r\n        );\r\n      }\r\n\r\n      return new WaitingForPushDeviceDetails();\r\n    } else if (event instanceof GotPushDeviceDetails) {\r\n      return new NotActivated();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForPushDeviceDetails extends ActivationState {\r\n  constructor() {\r\n    super('WaitingForPushDeviceDetails');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate) {\r\n      return new WaitingForPushDeviceDetails();\r\n    } else if (event instanceof CalledDeactivate) {\r\n      machine.callDeactivatedCallback(null);\r\n      return new NotActivated();\r\n    } else if (event instanceof GotPushDeviceDetails) {\r\n      const client = machine.client;\r\n      const device = client.device();\r\n\r\n      if (machine.registerCallback) {\r\n        machine.callCustomRegisterer(device, true);\r\n      } else {\r\n        const format = client.options.useBinaryProtocol\r\n            ? machine.client.Utils.Format.msgpack\r\n            : machine.client.Utils.Format.json,\r\n          body = client.rest.DeviceDetails.fromLocalDevice(device),\r\n          headers = machine.client.Defaults.defaultPostHeaders(client.options, { format }),\r\n          params = {};\r\n\r\n        if (client.options.headers) machine.client.Utils.mixin(headers, client.options.headers);\r\n\r\n        if (client.options.pushFullWait) machine.client.Utils.mixin(params, { fullWait: 'true' });\r\n\r\n        const requestBody = machine.client.Utils.encodeBody(body, client._MsgPack, format);\r\n\r\n        machine.client.rest.Resource.post(client, '/push/deviceRegistrations', requestBody, headers, params, null, true)\r\n          .then((response) => {\r\n            const deviceDetails = response.unpacked\r\n              ? response.body\r\n              : client.rest.DeviceDetails.fromResponseBody(response.body as any, client._MsgPack, format);\r\n            machine.handleEvent(new GotDeviceRegistration(deviceDetails as DeviceRegistration));\r\n          })\r\n          .catch((err) => {\r\n            machine.handleEvent(new GettingDeviceRegistrationFailed(err as ErrorInfo));\r\n          });\r\n      }\r\n\r\n      return new WaitingForDeviceRegistration();\r\n    } else if (event instanceof GettingPushDeviceDetailsFailed) {\r\n      machine.callActivatedCallback(event.reason);\r\n      return new NotActivated();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForDeviceRegistration extends ActivationState {\r\n  constructor() {\r\n    super('WaitingForDeviceRegistration');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate) {\r\n      return new WaitingForDeviceRegistration();\r\n    } else if (event instanceof GotDeviceRegistration) {\r\n      const device = machine.client.device();\r\n      device.deviceIdentityToken = event.tokenDetails.token;\r\n      device.persist();\r\n      machine.callActivatedCallback(null);\r\n      return new WaitingForNewPushDeviceDetails();\r\n    } else if (event instanceof GettingDeviceRegistrationFailed) {\r\n      machine.callActivatedCallback(event.reason);\r\n      return new NotActivated();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForNewPushDeviceDetails extends ActivationState {\r\n  constructor() {\r\n    super('WaitingForNewPushDeviceDetails');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate) {\r\n      machine.callActivatedCallback(null);\r\n      return new WaitingForNewPushDeviceDetails();\r\n    } else if (event instanceof CalledDeactivate) {\r\n      machine.deregister();\r\n      return new WaitingForDeregistration(this);\r\n    } else if (event instanceof GotPushDeviceDetails) {\r\n      machine.updateRegistration();\r\n      return new WaitingForRegistrationSync();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForRegistrationSync extends ActivationState {\r\n  triggeredByCalledActivate: boolean | null;\r\n\r\n  constructor(triggeredByCalledActivate: boolean | null = false) {\r\n    super('WaitingForRegistrationSync');\r\n    this.triggeredByCalledActivate = triggeredByCalledActivate;\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate && !this.triggeredByCalledActivate) {\r\n      machine.callActivatedCallback(null);\r\n      return new WaitingForRegistrationSync(true);\r\n    } else if (event instanceof RegistrationSynced) {\r\n      return new WaitingForNewPushDeviceDetails();\r\n    } else if (event instanceof SyncRegistrationFailed) {\r\n      machine.callUpdateRegistrationFailedCallback(event.reason);\r\n      return new AfterRegistrationSyncFailed();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass AfterRegistrationSyncFailed extends ActivationState {\r\n  constructor() {\r\n    super('AfterRegistrationSyncFailed');\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\r\n    if (event instanceof CalledActivate || event instanceof GotPushDeviceDetails) {\r\n      machine.updateRegistration();\r\n      return new WaitingForRegistrationSync(event instanceof CalledActivate);\r\n    } else if (event instanceof CalledDeactivate) {\r\n      machine.deregister();\r\n      return new WaitingForDeregistration(this);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass WaitingForDeregistration extends ActivationState {\r\n  previousState: ActivationState | null;\r\n\r\n  constructor(previousState: ActivationState | null) {\r\n    super('WaitingForDeregistration');\r\n    this.previousState = previousState;\r\n  }\r\n\r\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent): ActivationState | null {\r\n    if (event instanceof CalledDeactivate) {\r\n      return new WaitingForDeregistration(this.previousState);\r\n    } else if (event instanceof Deregistered) {\r\n      const device = machine.client.device();\r\n      delete device.deviceIdentityToken;\r\n      delete device.push.recipient;\r\n      device.resetId();\r\n      device.persist();\r\n      machine.callDeactivatedCallback(null);\r\n      return new NotActivated();\r\n    } else if (event instanceof DeregistrationFailed) {\r\n      machine.callDeactivatedCallback(event.reason);\r\n      return this.previousState;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\ntype ActivationStateName =\r\n  | 'NotActivated'\r\n  | 'WaitingForPushDeviceDetails'\r\n  | 'WaitingForDeviceRegistration'\r\n  | 'WaitingForNewPushDeviceDetails'\r\n  | 'WaitingForRegistrationSync'\r\n  | 'AfterRegistrationSyncFailed'\r\n  | 'WaitingForDeregistration';\r\n\r\nexport const ActivationStates = {\r\n  NotActivated,\r\n  WaitingForPushDeviceDetails,\r\n  WaitingForDeviceRegistration,\r\n  WaitingForNewPushDeviceDetails,\r\n  WaitingForRegistrationSync,\r\n  AfterRegistrationSyncFailed,\r\n  WaitingForDeregistration,\r\n};\r\n\r\nfunction isPersistentState(state: ActivationState) {\r\n  return state.name == 'NotActivated' || state.name == 'WaitingForNewPushDeviceDetails';\r\n}\r\n"],
  "mappings": "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",
  "names": ["GettingPushDeviceDetailsFailed", "GotPushDeviceDetails", "ErrorInfo", "ulid", "Platform", "headers"]
}
